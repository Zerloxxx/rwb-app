import { useState } from 'react';
import { useMissions } from '../context/MissionsContext';
import { transferParentToChild } from '../utils/piggyStorage';

export default function ParentMissions() {
  const { 
    getActiveMissions, 
    getCompletedMissions, 
    getLevelInfo,
    createCustomMission,
    completeMission,
    isMissionCompleted
  } = useMissions();

  const [activeTab, setActiveTab] = useState('overview');
  const [newMission, setNewMission] = useState({
    title: '',
    description: '',
    target: 1,
    reward: { type: 'money', amount: 100 },
    xp: 0,
    deadline: ''
  });

  const tabs = [
    { key: 'overview', label: '–û–±–∑–æ—Ä', icon: 'üìä' },
    { key: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–µ', icon: 'üéØ' },
    { key: 'completed', label: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', icon: '‚úÖ' },
    { key: 'create', label: '–°–æ–∑–¥–∞—Ç—å', icon: '‚ûï' }
  ];

  const activeMissions = getActiveMissions();
  const completedMissions = getCompletedMissions();
  const levelInfo = getLevelInfo();

  const handleCreateMission = () => {
    if (newMission.title.trim() && newMission.description.trim()) {
      const mission = {
        id: `custom_${Date.now()}`,
        type: 'custom',
        title: newMission.title.trim(),
        description: newMission.description.trim(),
        target: newMission.target,
        reward: newMission.reward,
        xp: newMission.xp,
        deadline: newMission.deadline,
        icon: 'üéÅ',
        createdBy: 'parent',
        createdAt: new Date().toISOString()
      };

      createCustomMission(mission);
      setNewMission({
        title: '',
        description: '',
        target: 1,
        reward: { type: 'money', amount: 100 },
        xp: 0,
        deadline: ''
      });
      setActiveTab('active'); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π
    }
  };

  const handleRewardMission = async (missionId) => {
    // –ù–∞—Ö–æ–¥–∏–º –º–∏—Å—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≥—Ä–∞–¥–µ
    const allMissions = [...getActiveMissions(), ...getCompletedMissions()];
    const mission = allMissions.find(m => m.id === missionId);
    
    if (!mission) {
      console.error('–ú–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', missionId);
      return;
    }

    console.log('üéÅ –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏:', mission);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏—Å—Å–∏—é
    const success = completeMission(missionId);
    if (success) {
      // –ï—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞ - –¥–µ–Ω—å–≥–∏, –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏—Ö —Å –∫–∞—Ä—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–±–µ–Ω–∫–∞
      if (mission.reward.type === 'money') {
        const transferSuccess = await transferParentToChild(mission.reward.amount);
        if (transferSuccess) {
          console.log(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${mission.reward.amount}‚ÇΩ —Å –∫–∞—Ä—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É —Ä–µ–±–µ–Ω–∫–∞`);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥');
        }
      }
      
      console.log(`‚úÖ –ú–∏—Å—Å–∏—è ${missionId} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–º!`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏');
    }
  };

  const renderOverviewTab = () => (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±–µ–Ω–∫–∞ */}
      <div className="rounded-[18px] bg-gradient-to-r from-purple-600/80 to-pink-600/80 p-6">
        <h3 className="text-lg font-semibold mb-4">–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±–µ–Ω–∫–∞</h3>
        <div className="grid grid-cols-2 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold">{levelInfo.level}</div>
            <div className="text-sm text-white/80">–£—Ä–æ–≤–µ–Ω—å</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold">{levelInfo.current} XP</div>
            <div className="text-sm text-white/80">–û–ø—ã—Ç</div>
          </div>
        </div>
        <div className="mt-4">
          <div className="flex justify-between text-sm mb-1">
            <span>–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</span>
            <span>{levelInfo.needed - levelInfo.current} XP</span>
          </div>
          <div className="h-2 bg-white/20 rounded-full overflow-hidden">
            <div 
              className="h-full bg-white/90 rounded-full transition-all duration-500"
              style={{ width: `${levelInfo.progress}%` }}
            />
          </div>
        </div>
      </div>

      {/* –°–≤–æ–¥–∫–∞ –º–∏—Å—Å–∏–π */}
      <div className="grid grid-cols-2 gap-4">
        <div className="rounded-[18px] bg-white/5 p-4 text-center">
          <div className="text-2xl font-bold text-green-400">{activeMissions.length}</div>
          <div className="text-sm text-white/80">–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π</div>
        </div>
        <div className="rounded-[18px] bg-white/5 p-4 text-center">
          <div className="text-2xl font-bold text-blue-400">{completedMissions.length}</div>
          <div className="text-sm text-white/80">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="rounded-[18px] bg-white/5 p-5">
        <h4 className="text-lg font-semibold mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
        <div className="space-y-3">
          <button
            onClick={() => setActiveTab('create')}
            className="w-full flex items-center gap-3 p-3 bg-blue-600/20 rounded-xl hover:bg-blue-600/30 transition-colors"
          >
            <span className="text-2xl">‚ûï</span>
            <div className="text-left">
              <div className="font-medium">–°–æ–∑–¥–∞—Ç—å –º–∏—Å—Å–∏—é</div>
              <div className="text-sm text-white/70">–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫—É</div>
            </div>
          </button>
          <button
            onClick={() => setActiveTab('active')}
            className="w-full flex items-center gap-3 p-3 bg-green-600/20 rounded-xl hover:bg-green-600/30 transition-colors"
          >
            <span className="text-2xl">üéØ</span>
            <div className="text-left">
              <div className="font-medium">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
              <div className="text-sm text-white/70">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏</div>
            </div>
          </button>
        </div>
      </div>
    </div>
  );

  const renderActiveTab = () => (
    <div className="space-y-4">
      {activeMissions.length === 0 ? (
        <div className="rounded-[18px] bg-white/5 p-6 text-center text-white/70">
          <div className="text-4xl mb-2">üéØ</div>
          <div>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π</div>
          <div className="text-sm mt-1">–°–æ–∑–¥–∞–π—Ç–µ –º–∏—Å—Å–∏—é –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞!</div>
        </div>
      ) : (
        activeMissions.map((mission) => (
          <div key={mission.id} className="rounded-[18px] bg-white/5 p-4">
            <div className="flex items-start justify-between gap-3">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-2">
                  <span className="text-2xl">{mission.icon}</span>
                  <div>
                    <div className="text-sm font-medium text-white/80">
                      {mission.type === 'custom' ? '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è' : 
                       mission.type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è' :
                       mission.type === 'weekly' ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è' : '–°—é–∂–µ—Ç–Ω–∞—è'}
                    </div>
                    <div className="text-lg font-bold">{mission.title}</div>
                  </div>
                </div>
                <div className="text-sm text-white/90 mb-3">{mission.description}</div>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                <div className="mb-3">
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-white/80">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                    <span className="font-semibold">{mission.progress || 0}/{mission.target}</span>
                  </div>
                  <div className="h-2 bg-white/20 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-white/80 rounded-full transition-all duration-500"
                      style={{ width: `${Math.min(((mission.progress || 0) / mission.target) * 100, 100)}%` }}
                    />
                  </div>
                </div>

                {/* –ù–∞–≥—Ä–∞–¥–∞ */}
                <div className="flex items-center gap-2 text-sm">
                  <span>–ù–∞–≥—Ä–∞–¥–∞:</span>
                  <span className="font-semibold">
                    {mission.reward.type === 'money' ? `${mission.reward.amount} ‚ÇΩ` :
                     mission.reward.type === 'coins' ? `${mission.reward.amount} –º–æ–Ω–µ—Ç` :
                     mission.reward.type === 'badge' ? '–ó–Ω–∞—á–æ–∫' :
                     mission.reward.type === 'skin' ? '–°–∫–∏–Ω' : '–ù–∞–≥—Ä–∞–¥–∞'}
                  </span>
                  {mission.xp > 0 && <span className="text-white/70">+{mission.xp} XP</span>}
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è */}
              {(mission.progress || 0) >= mission.target && !isMissionCompleted(mission.id) && (
                <button
                  onClick={() => handleRewardMission(mission.id)}
                  className="px-4 py-2 bg-green-600 text-white rounded-xl font-semibold hover:bg-green-700 transition-colors"
                >
                  –ù–∞–≥—Ä–∞–¥–∏—Ç—å
                </button>
              )}
            </div>
          </div>
        ))
      )}
    </div>
  );

  const renderCompletedTab = () => (
    <div className="space-y-4">
      {completedMissions.length === 0 ? (
        <div className="rounded-[18px] bg-white/5 p-6 text-center text-white/70">
          <div className="text-4xl mb-2">üèÜ</div>
          <div>–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π</div>
          <div className="text-sm mt-1">–†–µ–±–µ–Ω–æ–∫ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –º–∏—Å—Å–∏–∏</div>
        </div>
      ) : (
        completedMissions.map((mission) => (
          <div key={mission.id} className="rounded-[18px] bg-green-600/20 p-4 border border-green-500/30">
            <div className="flex items-start gap-3">
              <span className="text-2xl">‚úÖ</span>
              <div className="flex-1">
                <div className="text-lg font-bold">{mission.title}</div>
                <div className="text-sm text-white/90 mb-2">{mission.description}</div>
                <div className="text-sm text-green-400">
                  –í—ã–ø–æ–ª–Ω–µ–Ω–æ {new Date(mission.completedAt).toLocaleDateString()}
                </div>
              </div>
            </div>
          </div>
        ))
      )}
    </div>
  );

  const renderCreateTab = () => (
    <div className="space-y-6">
      <div className="rounded-[18px] bg-white/5 p-5">
        <h3 className="text-lg font-semibold mb-4">–°–æ–∑–¥–∞—Ç—å –º–∏—Å—Å–∏—é –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞</h3>
        
        <div className="space-y-4">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏ */}
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏—Å—Å–∏–∏
            </label>
            <input
              type="text"
              value={newMission.title}
              onChange={(e) => setNewMission({ ...newMission, title: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Ç–ª–æ–∂–∏ 100 ‚ÇΩ –≤ –∫–æ–ø–∏–ª–∫—É"
              className="w-full rounded-xl bg-white/10 px-4 py-3 text-white placeholder-white/50 border border-white/20 focus:border-blue-500 focus:outline-none"
            />
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              –û–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <textarea
              value={newMission.description}
              onChange={(e) => setNewMission({ ...newMission, description: e.target.value })}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è..."
              rows={3}
              className="w-full rounded-xl bg-white/10 px-4 py-3 text-white placeholder-white/50 border border-white/20 focus:border-blue-500 focus:outline-none resize-none"
            />
          </div>

          {/* –¶–µ–ª—å */}
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              –¶–µ–ª—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            </label>
            <input
              type="number"
              value={newMission.target}
              onChange={(e) => setNewMission({ ...newMission, target: parseInt(e.target.value) || 1 })}
              min="1"
              className="w-full rounded-xl bg-white/10 px-4 py-3 text-white placeholder-white/50 border border-white/20 focus:border-blue-500 focus:outline-none"
            />
          </div>

          {/* –ù–∞–≥—Ä–∞–¥–∞ */}
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              –ù–∞–≥—Ä–∞–¥–∞
            </label>
            <div className="grid grid-cols-2 gap-3">
              <select
                value={newMission.reward.type}
                onChange={(e) => setNewMission({ 
                  ...newMission, 
                  reward: { ...newMission.reward, type: e.target.value }
                })}
                className="rounded-xl bg-white/10 px-4 py-3 text-white border border-white/20 focus:border-blue-500 focus:outline-none"
              >
                <option value="money">–î–µ–Ω—å–≥–∏</option>
              </select>
              <input
                type="number"
                value={newMission.reward.amount}
                onChange={(e) => setNewMission({ 
                  ...newMission, 
                  reward: { ...newMission.reward, amount: parseInt(e.target.value) || 0 }
                })}
                min="1"
                placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                className="rounded-xl bg-white/10 px-4 py-3 text-white placeholder-white/50 border border-white/20 focus:border-blue-500 focus:outline-none"
              />
            </div>
          </div>

          {/* XP –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –º–∏—Å—Å–∏–π –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è */}

          {/* –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium text-white/80 mb-2">
              –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <input
              type="date"
              value={newMission.deadline}
              onChange={(e) => setNewMission({ ...newMission, deadline: e.target.value })}
              className="w-full rounded-xl bg-white/10 px-4 py-3 text-white border border-white/20 focus:border-blue-500 focus:outline-none"
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
          <button
            onClick={handleCreateMission}
            disabled={!newMission.title.trim() || !newMission.description.trim()}
            className="w-full py-3 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed"
          >
            –°–æ–∑–¥–∞—Ç—å –º–∏—Å—Å–∏—é {(!newMission.title.trim() || !newMission.description.trim()) && "(–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è)"}
          </button>
        </div>
      </div>
    </div>
  );

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return renderOverviewTab();
      case 'active':
        return renderActiveTab();
      case 'completed':
        return renderCompletedTab();
      case 'create':
        return renderCreateTab();
      default:
        return null;
    }
  };

  return (
    <div className="screen-shell mx-auto w-full max-w-[430px] min-h-screen bg-[#0b0b12] pb-24 text-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="fixed top-0 left-0 right-0 z-40 flex items-center justify-between bg-[#0b0b12] px-5 pb-4 shadow-md shadow-black/30">
        <button 
          type="button" 
          onClick={() => (window.location.hash = "#/parent")} 
          className="rounded-[12px] bg-white/10 px-3 py-1.5 text-sm hover:bg-white/20"
        >
          –ù–∞–∑–∞–¥
        </button>
        <div className="text-base font-semibold">–ú–∏—Å—Å–∏–∏ —Ä–µ–±–µ–Ω–∫–∞</div>
        <div className="w-16"></div>
      </header>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="px-5 pt-28">
        <div className="flex gap-2 overflow-x-auto pb-2">
          {tabs.map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              className={`whitespace-nowrap rounded-[12px] px-4 py-2 text-sm font-medium transition flex items-center gap-2 ${
                activeTab === tab.key 
                  ? "bg-[#5d2efc] text-white" 
                  : "bg-white/10 text-white/70 hover:bg-white/20"
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="px-5 pt-4">
        {renderTabContent()}
      </main>
    </div>
  );
}

